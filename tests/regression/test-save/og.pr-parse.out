[INFO] Starting to parse model: test-save/og.pr
[ERROR] Failed to parse model.
    line 3:4 no viable alternative at input '/* CIF TEXT (159, 221), (289, 188) */\n    -- Text area for declarations and comments\n\nuse dv comment 'dataview.asn';\n\nsignal run;\nsignal saved_signal(BoolType);\nsignal we;\n    /* CIF ENDTEXT */\n    CHANNEL c\n        FROM ENV TO og WITH run,\nsaved_signal;\n        FROM og TO ENV WITH we;\n    ENDCHANNEL;\n    BLOCK og;\n        SIGNALROUTE r\n            FROM ENV TO og WITH run,\nsaved_signal;\n            FROM og TO ENV WITH we;\n        CONNECT c AND r;\n        /* CIF PROCESS (225, 50), (150, 75) */\n        PROCESS og;\n            /* CIF TEXT (150, 75), (396, 136) */\n            --  Demonstrate how to simulate the behaviour of the SAVE\n-- signal. The actual SAVE implies dynamic memory allocation.\n-- But using a controlled-size array and a continuous signal it\n-- is easy to reproduce the same behaviour.\n\ndcl save_buffer SeqOf;\n\ndcl param BoolType;\n            /* CIF ENDTEXT */\n            /* CIF PROCEDURE (0, 106), (120, 35) */\n            PROCEDURE SAVE_PARAM;\n                /* CIF TEXT (1, 27), (289, 140) */\n                fpar in param BoolType;\n                /* CIF ENDTEXT */\n                /* CIF START (146, 192), (70, 28) */\n                START;\n                    /* CIF DECISION (100, 238), (161, 50) */\n                    DECISION length(save_buffer);\n                            /* CIF ANSWER (58, 308), (60, 34) */\n                            (<10):\n                                /* CIF TASK (0, 357), (177, 50) */\n                                TASK save_buffer :=\nsave_buffer // {param};\n                            /* CIF ANSWER (262, 308), (53, 34) */\n                            (10):\n                                /* CIF PROCEDURECALL (187, 357), (202, 38) */\n                                CALL writeln('Buffer Overflow!');\n                    ENDDECISION;\n                    /* CIF RETURN (163, 422), (35, 35) */\n                    RETURN ;\n            ENDPROCEDURE;\n            /* CIF PROCEDURE (5, 163), (113, 35) */\n            PROCEDURE GET_PARAM;\n                /* CIF TEXT (341, 385), (289, 140) */\n                -- Text area for declarations and comments\n\ndcl idx myinteger := 0;\n                /* CIF ENDTEXT */\n                /* CIF START (153, 81), (70, 35) */\n                START;\n                    /* CIF TASK (94, 131), (188, 35) */\n                    TASK param := save_buffer(0);\n                    /* CIF TASK (80, 181), (215, 35) */\n                    TASK idx := length (save_buffer) - 1;\n                    /* CIF TASK (46, 231), (282, 56) */\n                    TASK save_buffer := if length(save_buffer) > 1\nthen save_buffer(1, idx) else {} fi;\n                    /* CIF RETURN (170, 302), (35, 35) */\n                    RETURN ;\n            ENDPROCEDURE;\n            /* CIF START (97, 224), (70, 35) */\n            START;\n                /* CIF NEXTSTATE (97, 274), (70, 35) */\n                NEXTSTATE wait;\n            /* CIF STATE (479, 236), (88, 35) */\n            STATE Running;\n                /* CIF INPUT (588, 291), (70, 35) */\n                INPUT Run;\n                    /* CIF PROCEDURECALL (525, 341), (194, 35) */\n                    CALL writeln('Already running');\n                    /* CIF NEXTSTATE (588, 391), (70, 35) */\n                    NEXTSTATE -;\n                /* CIF PROVIDED (324, 291), (181, 35) */\n                PROVIDED length(save_buffer) > 0;\n                    /* CIF PROCEDURECALL (358, 341), (113, 35) */\n                    CALL GET_PARAM;\n                    /* CIF PROCEDURECALL (314, 391), (200, 35) */\n                    CALL writeln('Running: ', param);\n                    /* CIF NEXTSTATE (370, 441), (88, 35) */\n                    NEXTSTATE Running;\n            ENDSTATE;\n            /* CIF STATE (97, 274), (70, 35) */\n            STATE wait;\n                /* CIF INPUT (7, 329), (84, 35) */\n                INPUT run;\n                    /* CIF NEXTSTATE (5, 379), (88, 35) */\n                    NEXTSTATE Running;\n                /* CIF INPUT (103, 329), (162, 35) */\n                INPUT saved_signal(param);\n                    /* CIF PROCEDURECALL (100, 379), (168, 35) */\n                    CALL SAVE_PARAM(param);\n                    /* CIF NEXTSTATE (149, 429), (70, 35) */\n                    NEXTSTATE wait;\n            ENDSTATE;\n        ENDPROCESS og;\n    ENDBLOCK;\n'
