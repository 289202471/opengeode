[INFO] Starting to parse model test-ibk2/framemanager.pr
[ERROR] Failed to parse model.
    org.antlr.v4.runtime.misc.ParseCancellationException: line 10:24 no viable alternative at input '/* CIF procedure (10, 232), (94, 35) */\n                    procedure InvertFcs;\n                        /* CIF TEXT (591, 93), (287, 143) */\n                        -- Procedure interface\n                        \n                        fpar\n                          in fcs MyFcs,\n                          out invertedFcs MyFcs;\n                        \n                        -- Text area for declarations and comments\n                        \n                        DCL i My16BitArrayInteger := 0;\n                        /* CIF ENDTEXT */\n                        /* CIF START (410, 81), (70, 35) */\n                        START;\n                            /* CIF task (335, 131), (220, 53) */\n                            task for ii in range(0, length(fcs), 1):\n  invertedFcs(15-ii) := fcs(i)\nendfor;\n                            /* CIF return (427, 199), (35, 35) */\n                            return ;\n                    endprocedure;\n                    /* CIF procedure (1, 186), (116, 35) */\n                    procedure DeclareAddr;\n                        /* CIF TEXT (562, 10), (287, 123) */\n                        -- Procedure interface\n                        \n                        fpar\n                          out addr MyAddr;\n                        \n                        -- Text area for declarations and comments\n                        /* CIF ENDTEXT */\n                        /* CIF START (228, 0), (70, 35) */\n                        START;\n                            /* CIF task (0, 50), (526, 63) */\n                            task for i in range(0, 7, 1):\n  addr!destinationAddress(i) := { false, false, false, false, false, false, false, false }\nendfor;\n                            /* CIF task (14, 131), (498, 63) */\n                            task for i in range(0, 7, 1):\n  addr!sourceAddress(i) := { false, false, false, false, false, false, false, false }\nendfor;\n                            /* CIF return (245, 209), (35, 35) */\n                            return ;\n                    endprocedure;\n                    /* CIF procedure (2, 95), (117, 35) */\n                    procedure CalculateFcs;\n                        /* CIF TEXT (922, 13), (287, 338) */\n                        -- Procedure interface\n                        \n                        fpar\n                          in addr MyAddr,\n                          in control MyControl,\n                          in pid MyPid,\n                          in info MyInfo,\n                          out fcs MyFcs;\n                        \n                        -- Text area for declarations and comments\n                        \n                        DCL dataStack MyDataStack;\n                        \n                        DCL fcsStack MyFcsStack;\n                        DCL fcsPolynomial MyFcsPolynomial;\n                        \n                        DCL k MyFcsStackInteger := 0;\n                        \n                        DCL fcsXorResult MyFcsPolynomial;\n                        \n                        DCL position My16BitArrayInteger;\n                        DCL fcsPosition MyFcsPolynomialInteger;\n                        /* CIF ENDTEXT */\n                        /* CIF START (551, 0), (70, 35) */\n                        START;\n                            /* CIF task (404, 50), (364, 83) */\n                            task for i in range(0, length(addr!destinationAddress), 1):\n  for j in range(0, length(addr!destinationAddress(i))):\n    fcsStack((i*8)+j) := addr!destinationAddress(i)(j)\n  endfor\nendfor;\n                            /* CIF task (408, 151), (357, 83) */\n                            task for i in range(0, length(addr!sourceAddress), 1):\n  for j in range(0, length(addr!sourceAddress(i))):\n    fcsStack(56+(i*8)+j) := addr!sourceAddress(i)(j)\n  endfor\nendfor;\n                            /* CIF task (478, 249), (217, 63) */\n                            task for i in range(112, 120, 1):\n    fcsStack(i) := control(i - 112)\n  endfor;\n                            /* CIF task (478, 327), (217, 53) */\n                            task for i in range(120, 128, 1):\n    fcsStack(i) := pid(i - 120)\n  endfor;\n                            /* CIF task (456, 395), (260, 63) */\n                            task for i in range(128, 132, 1):\n  fcsStack(i) := info!ba!srcAddr(i - 128)\nendfor;\n                            /* CIF task (455, 473), (262, 53) */\n                            task for i in range(132, 136, 1):\n  fcsStack(i) := info!ba!dstAddr(i - 132)\nendfor;\n                            /* CIF task (475, 541), (222, 63) */\n                            task for i in range(136, 144, 1):\n  fcsStack(i) := info!cntrl(i - 136)\nendfor;\n                            /* CIF task (474, 619), (224, 53) */\n                            task for i in range(144, 152, 1):\n  fcsStack(i) := info!code(i - 144)\nendfor;\n                            /* CIF task (419, 687), (335, 83) */\n                            task for i in range(0, length(info!operationData), 1):\n  for j in range(0, length(info!operationData(i)), 1):\n    dataStack((i*8)+j) := info!operationData(i)(j)\n  endfor\nendfor\n                            /* CIF comment (773, 711), (224, 35) */\n                            comment 'Array of octets to array of bits';\n                            /* CIF task (430, 785), (312, 53) */\n                            task for i in range(152, length(dataStack) + 152, 1):\n  fcsStack(i) := dataStack(i - 152)\nendfor;\n                            /* CIF task (368, 853), (437, 68) */\n                            task for i in range(length(dataStack) + 152, length(dataStack) + 168, 1):\n  position := i - (length(dataStack) + 152)\n  fcsStack(i) := info!ifcs(position)\nendfor;\n                            /* CIF task (368, 951), (437, 53) */\n                            task for i in range(length(dataStack) + 168, length(dataStack) + 184, 1):\n  fcsStack(i) := false\nendfor;\n                            /* CIF task (207, 1019), (758, 35) */\n                            task fcsPolynomial := {true, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true};\n                            /* CIF label (534, 1069), (105, 46) */\n                            calculation:\n                            /* CIF decision (513, 1130), (146, 50) */\n                            decision fcsStack(k) = true;\n                                /* CIF ANSWER (347, 1200), (70, 23) */\n                                (true):\n                                    /* CIF task (0, 1238), (765, 35) */\n                                    task fcsXorResult := {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};\n                                    /* CIF task (89, 1288), (586, 68) */\n                                    task for l in range(k, k + length(fcsPolynomial), 1):\n  fcsPosition := l - k\n  fcsXorResult(fcsPosition) := if fcsStack(l) = fcsPolynomial(fcsPosition) then false else true fi\nendfor\n                                    /* CIF comment (692, 1304), (126, 35) */\n                                    comment 'XOR operation';\n                                    /* CIF task (232, 1386), (300, 68) */\n                                    task for l in range(k, length(fcsXorResult) + k, 1):\n  fcsPosition := l - k\n  fcsStack(l) := fcsXorResult(fcsPosition)\nendfor\n                                    /* CIF comment (547, 1402), (127, 35) */\n                                    comment 'Replace result';\n                                /* CIF ANSWER (828, 1200), (70, 23) */\n                                (false):\n                            enddecision;\n                            /* CIF decision (420, 1469), (332, 50) */\n                            decision k = length(fcsStack) - length(fcsPolynomial);\n                                /* CIF ANSWER (312, 1539), (70, 23) */\n                                (true):\n                                    /* CIF task (85, 1577), (525, 68) */\n                                    task for l in range (length(fcsStack) - (length(fcsPolynomial) - 2), length(fcsStack), 1):\n  position := l - (length(fcsStack) - (length(fcsPolynomial) - 2))\n  fcs(position) := fcsStack(l)\nendfor;\n                                    /* CIF return (330, 1660), (35, 35) */\n                                    return ;\n                                /* CIF ANSWER (795, 1539), (70, 23) */\n                                (false):\n                                    /* CIF task (712, 1577), (236, 35) */\n                                    task k := if k = 2175 then k else k + 1 fi\n                                    /* CIF comment (964, 1535), (100, 35) */\n                                    comment 'Shift right';\n                                    /* CIF join (813, 1627), (35, 35) */\n                                    join calculation;\n                            enddecision;\n                    endprocedure;\n                    /* CIF procedure (11, 140), (96, 35) */\n                    procedure PackData;\n                        /* CIF TEXT (273, 15), (287, 233) */\n                        -- Procedure interface\n                        \n                        fpar\n                          in startFlag MyFlag,\n                          in addr MyAddr,\n                          in control MyControl,\n                          in pid MyPid,\n                          in info MyInfo,\n                          in fcs MyFcs,\n                          in endflag MyFlag,\n                          out frame MyFrame;\n                        \n                        -- Text area for declarations and comments\n                        /* CIF ENDTEXT */\n                        /* CIF START (72, 1), (70, 35) */\n                        START;\n                            /* CIF task (2, 51), (209, 113) */\n                            task frame!startFlag := startFlag,\nframe!addr := addr,\nframe!control := control,\nframe!pid := pid,\nframe!info := info,\nframe!fcs := fcs,\nframe!endFlag := endFlag;\n                            /* CIF return (89, 179), (35, 35) */\n                            return ;\n                    endprocedure;\n                    /* CIF START (24, 0), (70, 35) */\n                    START;\n                        /* CIF NEXTSTATE (0, 50), (119, 35) */\n                        NEXTSTATE dataReceival;\n                    /* CIF state (356, 0), (119, 35) */\n                    state dataReceival;\n                        /* CIF input (320, 55), (191, 35) */\n                        input ReceiveData(info);\n                            /* CIF task (153, 110), (526, 63) */\n                            task for i in range(0, 7, 1):\n  addr!destinationAddress(i) := { false, false, false, false, false, false, false, false }\nendfor;\n                            /* CIF task (167, 188), (498, 63) */\n                            task for i in range(0, 7, 1):\n  addr!sourceAddress(i) := { false, false, false, false, false, false, false, false }\nendfor;\n                            /* CIF task (216, 266), (400, 68) */\n                            task startFlag := { false, true, true, true, true, true, true, false },\ncontrol := { false, false, false, false, false, false, true, true },\npid := { true, true, true, true, false, false, false, false },\nendFlag := { false, true, true, true, true, true, true, false };\n                            /* CIF PROCEDURECALL (275, 349), (281, 35) */\n                            call CalculateFcs(addr, control, pid, info, fcs);\n                            /* CIF PROCEDURECALL (317, 399), (198, 35) */\n                            call InvertFcs(fcs, invertedFcs);\n                            /* CIF PROCEDURECALL (179, 449), (473, 35) */\n                            call PackData(startFlag, addr, control, pid, info, invertedFcs, endFlag, frame);\n                            /* CIF output (341, 499), (150, 35) */\n                            output SendFrame(frame);\n                            /* CIF return (398, 549), (35, 35) */\n                            return ;\n                    endstate;\n            endsubstructure;\n            state frameReceival;\n            substructure\n                    /* CIF TEXT (596, 14), (287, 140) */\n                    -- Text area for declarations and comments\n                    \n                    DCL calculatedFcs MyFcs;\n                    /* CIF ENDTEXT */\n                    /* CIF procedure (0, 101), (150, 35) */\n                    procedure UnpackFrame;\n                        /* CIF TEXT (254, 25), (287, 203) */\n                        -- Procedure interface\n                        \n                        fpar\n                          in frame MyFrame,\n                          out addr MyAddr,\n                          out control MyControl,\n                          out pid MyPid,\n                          out info MyInfo,\n                          out fcs MyFcs;\n                        \n                        -- Text area for declarations and comments\n                        /* CIF ENDTEXT */\n                        /* CIF START (69, 8), (70, 35) */\n                        START;\n                            /* CIF task (10, 58), (187, 83) */\n                            task addr := frame!addr,\ncontrol := frame!control,\npid := frame!pid,\ninfo := frame!info,\nfcs := frame!fcs;\n                            /* CIF return (86, 156), (35, 35) */\n                            return ;\n                    endprocedure;\n                    /* CIF procedure (4, 173), (140, 35) */\n                    procedure FrameCalculateFcs;\n                        /* CIF TEXT (922, 13), (287, 338) */\n                        -- Procedure interface\n                        \n                        fpar\n                          in addr MyAddr,\n                          in control MyControl,\n                          in pid MyPid,\n                          in info MyInfo,\n                          out fcs MyFcs;\n                        \n                        -- Text area for declarations and comments\n                        \n                        DCL dataStack MyDataStack;\n                        \n                        DCL fcsStack MyFcsStack;\n                        DCL fcsPolynomial MyFcsPolynomial;\n                        \n                        DCL k MyFcsStackInteger := 0;\n                        \n                        DCL fcsXorResult MyFcsPolynomial;\n                        \n                        DCL position My16BitArrayInteger;\n                        DCL fcsPosition MyFcsPolynomialInteger;\n                        /* CIF ENDTEXT */\n                        /* CIF START (551, 0), (70, 35) */\n                        START;\n                            /* CIF task (404, 50), (364, 83) */\n                            task for i in range(0, length(addr!destinationAddress), 1):\n  for j in range(0, length(addr!destinationAddress(i))):\n    fcsStack((i*8)+j) := addr!destinationAddress(i)(j)\n  endfor\nendfor;\n                            /* CIF task (408, 151), (357, 83) */\n                            task for i in range(0, length(addr!sourceAddress), 1):\n  for j in range(0, length(addr!sourceAddress(i))):\n    fcsStack(56+(i*8)+j) := addr!sourceAddress(i)(j)\n  endfor\nendfor;\n                            /* CIF task (478, 249), (217, 63) */\n                            task for i in range(112, 120, 1):\n    fcsStack(i) := control(i - 112)\n  endfor;\n                            /* CIF task (478, 327), (217, 53) */\n                            task for i in range(120, 128, 1):\n    fcsStack(i) := pid(i - 120)\n  endfor;\n                            /* CIF task (456, 395), (260, 63) */\n                            task for i in range(128, 132, 1):\n  fcsStack(i) := info!ba!srcAddr(i - 128)\nendfor;\n                            /* CIF task (455, 473), (262, 53) */\n                            task for i in range(132, 136, 1):\n  fcsStack(i) := info!ba!dstAddr(i - 132)\nendfor;\n                            /* CIF task (475, 541), (222, 63) */\n                            task for i in range(136, 144, 1):\n  fcsStack(i) := info!cntrl(i - 136)\nendfor;\n                            /* CIF task (474, 619), (224, 53) */\n                            task for i in range(144, 152, 1):\n  fcsStack(i) := info!code(i - 144)\nendfor;\n                            /* CIF task (419, 687), (335, 83) */\n                            task for i in range(0, length(info!operationData), 1):\n  for j in range(0, length(info!operationData(i)), 1):\n    dataStack((i*8)+j) := info!operationData(i)(j)\n  endfor\nendfor\n                            /* CIF comment (773, 711), (224, 35) */\n                            comment 'Array of octets to array of bits';\n                            /* CIF task (430, 785), (312, 53) */\n                            task for i in range(152, length(dataStack) + 152, 1):\n  fcsStack(i) := dataStack(i - 152)\nendfor;\n                            /* CIF task (368, 853), (437, 68) */\n                            task for i in range(length(dataStack) + 152, length(dataStack) + 168, 1):\n  position := i - (length(dataStack) + 152)\n  fcsStack(i) := info!ifcs(position)\nendfor;\n                            /* CIF task (368, 951), (437, 53) */\n                            task for i in range(length(dataStack) + 168, length(dataStack) + 184, 1):\n  fcsStack(i) := false\nendfor;\n                            /* CIF task (207, 1019), (758, 35) */\n                            task fcsPolynomial := {true, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true};\n                            /* CIF label (534, 1069), (105, 46) */\n                            calculation:\n                            /* CIF decision (513, 1130), (146, 50) */\n                            decision fcsStack(k) = true;\n                                /* CIF ANSWER (347, 1200), (70, 23) */\n                                (true):\n                                    /* CIF task (0, 1238), (765, 35) */\n                                    task fcsXorResult := {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};\n                                    /* CIF task (89, 1288), (586, 68) */\n                                    task for l in range(k, k + length(fcsPolynomial), 1):\n  fcsPosition := l - k\n  fcsXorResult(fcsPosition) := if fcsStack(l) = fcsPolynomial(fcsPosition) then false else true fi\nendfor\n                                    /* CIF comment (692, 1304), (126, 35) */\n                                    comment 'XOR operation';\n                                    /* CIF task (232, 1386), (300, 68) */\n                                    task for l in range(k, length(fcsXorResult) + k, 1):\n  fcsPosition := l - k\n  fcsStack(l) := fcsXorResult(fcsPosition)\nendfor\n                                    /* CIF comment (547, 1402), (127, 35) */\n                                    comment 'Replace result';\n                                /* CIF ANSWER (828, 1200), (70, 23) */\n                                (false):\n                            enddecision;\n                            /* CIF decision (420, 1469), (332, 50) */\n                            decision k = length(fcsStack) - length(fcsPolynomial);\n                                /* CIF ANSWER (312, 1539), (70, 23) */\n                                (true):\n                                    /* CIF task (85, 1577), (525, 68) */\n                                    task for l in range (length(fcsStack) - (length(fcsPolynomial) - 2), length(fcsStack), 1):\n  position := l - (length(fcsStack) - (length(fcsPolynomial) - 2))\n  fcs(position) := fcsStack(l)\nendfor;\n                                    /* CIF return (330, 1660), (35, 35) */\n                                    return ;\n                                /* CIF ANSWER (795, 1539), (70, 23) */\n                                (false):\n                                    /* CIF task (712, 1577), (236, 35) */\n                                    task k := if k = 2175 then k else k + 1 fi\n                                    /* CIF comment (964, 1528), (100, 35) */\n                                    comment 'Shift right';\n                                    /* CIF join (813, 1627), (35, 35) */\n                                    join calculation;\n                            enddecision;\n                    endprocedure;\n                    /* CIF procedure (13, 224), (117, 35) */\n                    procedure FrameInvertFcs;\n                        /* CIF TEXT (591, 93), (287, 143) */\n                        -- Procedure interface\n                        \n                        fpar\n                          in fcs MyFcs,\n                          out invertedFcs MyFcs;\n                        \n                        -- Text area for declarations and comments\n                        \n                        DCL i My16BitArrayInteger := 0;\n                        /* CIF ENDTEXT */\n                        /* CIF START (410, 81), (70, 35) */\n                        START;\n                            /* CIF task (335, 131), (220, 53) */\n                            task for ii in range(0, length(fcs), 1):\n  invertedFcs(15-ii) := fcs(i)\nendfor;\n                            /* CIF return (427, 199), (35, 35) */\n                            return ;\n                    endprocedure;\n                    /* CIF START (38, 1), (70, 35) */\n                    START;\n                        /* CIF NEXTSTATE (6, 51), (134, 35) */\n                        NEXTSTATE frameReceival;\n                    /* CIF state (321, 1), (127, 35) */\n                    state frameReceival;\n                        /* CIF input (290, 56), (189, 35) */\n                        input ReceiveFrame(frame);\n                            /* CIF PROCEDURECALL (221, 106), (327, 35) */\n                            call UnpackFrame(frame, addr, control, pid, info, fcs);\n                            /* CIF PROCEDURECALL (199, 156), (371, 35) */\n                            call FrameCalculateFcs(addr, control, pid, info, calculatedFcs);\n                            /* CIF PROCEDURECALL (240, 206), (289, 35) */\n                            call FrameInvertFcs(calculatedFcs, invertedFcs);\n                            /* CIF decision (243, 256), (282, 50) */\n                            decision invertedFcs = fcs;\n                                /* CIF ANSWER (233, 326), (70, 23) */\n                                (true):\n                                    /* CIF output (204, 364), (128, 35) */\n                                    output SendData(info);\n                                /* CIF ANSWER (459, 326), (70, 23) */\n                                (false):\n                            enddecision;\n                            /* CIF return (367, 414), (35, 35) */\n                            return ;\n                    endstate;\n            endsubstructure;\n            /* CIF state (0, 163), (127, 35) */\n            state frameReceival;\n            endstate;\n            /* CIF state (4, 117), (119, 33) */\n            state dataReceival;\n            endstate;\n    endsubstructure;\n    /* CIF TEXT (689, 22), (287, 218) */\n    -- Text area for declarations and comments\n    \n    DCL info MyInfo;\n    \n    DCL startFlag MyFlag;\n    DCL addr MyAddr;\n    DCL control MyControl;\n    DCL pid MyPid;\n    DCL fcs MyFcs;\n    DCL endFlag MyFlag;\n    \n    DCL invertedFcs MyFcs;\n    \n    DCL frame MyFrame;\n    /* CIF ENDTEXT */\n    /* CIF START (309, 10), (70, 35) */\n    START;\n        /* CIF label (302, 60), (83, 35) */\n        waiting:\n        /* CIF NEXTSTATE (309, 110), (70, 35) */\n        NEXTSTATE Wait;\n    /* CIF state (488, 11), (70, 35) */\n    state Wait;\n    endstate;\n'
