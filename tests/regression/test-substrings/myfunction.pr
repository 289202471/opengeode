/* CIF PROCESS (200, 143), (150, 75) */
PROCESS myfunction;
    /* CIF TEXT (7, 43), (334, 41) */
    -- Test substrings in various contexts and operators
    /* CIF ENDTEXT */
    /* CIF TEXT (0, 133), (282, 216) */
    dcl str MyOctStr := 'abc';
dcl variable_str String := 'Hello!';

dcl seqof  MySeqOf := {hello, world};

dcl seqint seqInt := {1};
dcl seqbool seqBool := { true, false};
dcl seqbool2 seqBool2 := { true, false};

dcl iseq IntSeq := {0,1,2,3};
dcl fixedseq FixedIntSeq := {0,1,2,3,4};
dcl n t_UInt8;
    /* CIF ENDTEXT */
    /* CIF PROCEDURE (1416, 490), (91, 35) */
    PROCEDURE factorial;
        /* CIF TEXT (29, 42), (215, 53) */
        fpar in N MyInteger, 
          in/out result MyInteger;
        /* CIF ENDTEXT */
        /* CIF START (298, 33), (70, 35) */
        START;
            /* CIF TASK (284, 83), (97, 35) */
            TASK result := 1;
            /* CIF TASK (223, 133), (220, 53) */
            TASK for x in range(1, n+1):
    result := (result * x) mod 255
endfor;
            /* CIF RETURN (315, 201), (35, 35) */
            RETURN ;
    ENDPROCEDURE;
    /* CIF START (353, 217), (65, 37) */
    START;
        /* CIF TASK (319, 269), (131, 35) */
        TASK n := iseq(0,2)(0);
        /* CIF PROCEDURECALL (335, 319), (100, 35) */
        CALL writeln(n)
        /* CIF COMMENT (455, 319), (77, 35) */
        COMMENT 'print 0';
        /* CIF TASK (306, 369), (158, 40) */
        TASK iseq := iseq(0,3)(0,2);
        /* CIF TASK (316, 424), (138, 56) */
        TASK for x in iseq:
   call writeln(x);
endfor
        /* CIF COMMENT (480, 422), (81, 72) */
        COMMENT 'print
0
1
2';
        /* CIF TASK (289, 495), (192, 35) */
        TASK n := length(fixedseq(0,1));
        /* CIF PROCEDURECALL (335, 545), (100, 35) */
        CALL writeln(n)
        /* CIF COMMENT (455, 545), (83, 35) */
        COMMENT 'print 2';
        /* CIF TASK (309, 595), (151, 35) */
        TASK seqof := seqof(0,1)
        /* CIF COMMENT (482, 595), (208, 35) */
        COMMENT 'equivalent to seqof := seqof';
        /* CIF DECISION (324, 645), (123, 50) */
        DECISION hello in seqof
        /* CIF COMMENT (467, 646), (179, 53) */
        COMMENT 'Check IN operator with
enumerated type';
                /* CIF ANSWER (253, 715), (70, 24) */
                (true):
                    /* CIF PROCEDURECALL (199, 754), (177, 35) */
                    CALL writeln(hello in seqof)
                    /* CIF COMMENT (397, 754), (114, 35) */
                    COMMENT 'print "TRUE"';
                /* CIF ANSWER (515, 715), (70, 24) */
                (false):
        ENDDECISION;
        /* CIF DECISION (308, 804), (155, 50) */
        DECISION hello in seqof(0,0)
        /* CIF COMMENT (491, 767), (236, 56) */
        COMMENT 'Check IN operator with
list substring - first element only
should go to branch TRUE';
                /* CIF ANSWER (254, 827), (66, 33) */
                (true):
                    /* CIF PROCEDURECALL (187, 875), (201, 35) */
                    CALL writeln(hello in seqof(0,1))
                    /* CIF COMMENT (412, 875), (114, 35) */
                    COMMENT 'print "TRUE"';
                /* CIF ANSWER (532, 828), (70, 24) */
                (false):
        ENDDECISION;
        /* CIF PROCEDURECALL (289, 925), (191, 35) */
        CALL writeln(variable_str(0,4))
        /* CIF COMMENT (492, 860), (113, 35) */
        COMMENT 'print "Hello"';
        /* CIF TASK (297, 975), (176, 56) */
        TASK for x in seqof:
    call writeln(num(x));
endfor
        /* CIF COMMENT (492, 918), (96, 56) */
        COMMENT 'print:
12
13';
        /* CIF TASK (295, 1046), (180, 56) */
        TASK for x in seqof(0,1):
    call writeln(-num(x));
endfor
        /* CIF COMMENT (494, 982), (96, 56) */
        COMMENT 'print:
-12
-13';
        /* CIF PROCEDURECALL (295, 1117), (180, 35) */
        CALL writeln(length(seqof))
        /* CIF COMMENT (495, 1067), (77, 35) */
        COMMENT 'print 2';
        /* CIF PROCEDURECALL (281, 1167), (209, 35) */
        CALL writeln(length(seqof(0,1)))
        /* CIF COMMENT (510, 1117), (77, 35) */
        COMMENT 'print 2';
        /* CIF LABEL (304, 1217), (162, 35) */
        variable_length_seq:
        /* CIF TASK (314, 1267), (142, 56) */
        TASK for x in seqint:
    call writeln(x);
endfor
        /* CIF COMMENT (476, 1203), (96, 53) */
        COMMENT 'print:
1';
        /* CIF TASK (309, 1338), (152, 56) */
        TASK for x in seqint(0,0):
    call writeln(x);
endfor
        /* CIF COMMENT (482, 1274), (96, 53) */
        COMMENT 'print:
1';
        /* CIF DECISION (324, 1409), (123, 50) */
        DECISION 1 in seqint
        /* CIF COMMENT (466, 1349), (179, 53) */
        COMMENT 'Check IN operator with
variable-length seqOf';
                /* CIF ANSWER (253, 1441), (66, 33) */
                (true):
                    /* CIF PROCEDURECALL (198, 1489), (177, 35) */
                    CALL writeln(1 in seqint)
                    /* CIF COMMENT (398, 1489), (114, 35) */
                    COMMENT 'print "TRUE"';
                /* CIF ANSWER (513, 1441), (70, 24) */
                (false):
        ENDDECISION;
        /* CIF DECISION (321, 1539), (128, 50) */
        DECISION 1 in seqint(0,0)
        /* CIF COMMENT (469, 1479), (179, 53) */
        COMMENT 'Check IN operator with
variable-length seqOf';
                /* CIF ANSWER (243, 1571), (70, 24) */
                (true):
                    /* CIF PROCEDURECALL (187, 1610), (182, 35) */
                    CALL writeln(1 in seqint(0,0))
                    /* CIF COMMENT (391, 1610), (114, 35) */
                    COMMENT 'print "TRUE"';
                /* CIF ANSWER (514, 1571), (70, 24) */
                (false):
        ENDDECISION;
        /* CIF PROCEDURECALL (295, 1660), (180, 35) */
        CALL writeln(length(seqint))
        /* CIF COMMENT (495, 1610), (77, 35) */
        COMMENT 'print 1';
        /* CIF PROCEDURECALL (279, 1710), (212, 35) */
        CALL writeln(length(seqint(0,0)))
        /* CIF COMMENT (511, 1660), (77, 35) */
        COMMENT 'print 1';
        /* CIF TASK (303, 1760), (163, 35) */
        TASK seqint := seqint // {2};
        /* CIF TASK (290, 1810), (190, 35) */
        TASK seqint := seqint(0,0) // {5};
        /* CIF TASK (314, 1860), (142, 56) */
        TASK for x in seqint:
    call writeln(x);
endfor
        /* CIF COMMENT (478, 1820), (96, 56) */
        COMMENT 'print:
1
5';
        /* CIF TASK (269, 1931), (233, 35) */
        TASK seqbool := seqbool and seqbool
        /* CIF COMMENT (522, 1905), (194, 35) */
        COMMENT 'should not raise any error';
        /* CIF TASK (256, 1981), (258, 38) */
        TASK 'seqbool2 := seqbool2 and seqbool2'
        /* CIF COMMENT (535, 1967), (213, 35) */
        COMMENT 'Variable-length -> raise error';
        /* CIF NEXTSTATE (349, 2034), (68, 33) */
        NEXTSTATE Wait;
    /* CIF STATE (839, 313), (70, 35) */
    STATE wait;
    ENDSTATE;
ENDPROCESS myfunction;