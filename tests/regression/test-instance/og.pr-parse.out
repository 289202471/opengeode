[INFO] Starting to parse model test-instance/og.pr
[ERROR] Failed to parse model.
    org.antlr.v4.runtime.misc.ParseCancellationException: line 4:4 mismatched input '-- A Demo to test octet strings\n    -- using various symbols.\n    \n    -- check that types are case insensitive\n    DCL first_msg, msg my_octStr;\n    \n    DCL seq SeqOf;\n    \n    DCL test Some_Thing;\n    dcl foo MyInteger := 3;\n    \n    -- Unicode comments: héhé hôhÖ\n    \n    dcl alwaysTrue Type2 := 3 in {1,2,3};\n    dcl alwaysFalse Type2 := 0 in {1,2,3};\n    \n    dcl seqofbool seqBool := { true, true};\n    /* CIF ENDTEXT */\n    /* CIF START (1427, 35), (100, 50) */\n    START;\n        /* CIF task (1370, 100), (214, 83) */\n        task test := 5,\ntest := power(test, 1),\ntest := abs(-4+1),\ntest := abs(test)\n        /* CIF comment (1603, 123), (183, 35) */\n        comment 'Task with unicode: voilà!';\n        /* CIF task (1375, 198), (204, 50) */\n        task first_msg := 'Say hello first!'\n        /* CIF comment (1599, 198), (148, 50) */\n        comment 'String assignment';\n        /* CIF PROCEDURECALL (1388, 263), (177, 35) */\n        call writeln( first_msg(1,2));\n        /* CIF PROCEDURECALL (1373, 313), (207, 35) */\n        call writeln( not (not not true));\n        /* CIF task (1394, 363), (165, 50) */\n        task seq := default_seqof,\nseq := {1,2,3}\n        /* CIF comment (1579, 363), (204, 50) */\n        comment 'default_seqof is a constant\ndefined in the ASN.1 model';\n        /* CIF task (1345, 428), (263, 50) */\n        task seq := seq // {4, test} // default_seqof\n        /* CIF comment (1629, 428), (156, 50) */\n        comment 'Concatenate\ntwo SEQUENCE OF';\n        /* CIF task (1408, 493), (137, 50) */\n        task 'seq(1) := seq(2)';\n        /* CIF task (1382, 558), (189, 50) */\n        task seq := seq(0,1) // seq(3, 4)\n        /* CIF comment (1590, 558), (166, 50) */\n        comment 'Remove 3rd element';\n        /* CIF task (1407, 623), (140, 53) */\n        task for x in seq:\n    call writeln(x);\nendfor;\n        /* CIF PROCEDURECALL (1395, 691), (164, 35) */\n        call writeln('test=', test);\n        /* CIF decision (1425, 741), (104, 70) */\n        decision test in seq\n        /* CIF comment (1549, 756), (170, 39) */\n        comment 'Test the "in" operator\nUnicode test: Ï';\n            /* CIF ANSWER (1335, 831), (100, 35) */\n            (TRUE):\n                /* CIF PROCEDURECALL (1308, 881), (154, 50) */\n                call writeln('All OK (1)');\n            /* CIF ANSWER (1498, 831), (100, 35) */\n            (FALSE):\n                /* CIF PROCEDURECALL (1466, 881), (164, 50) */\n                call writeln('NOT OK (1)')\n                /* CIF comment (1650, 888), (117, 35) */\n                comment 'Call UnicÔDË';\n        enddecision;\n        /* CIF decision (1427, 946), (100, 70) */\n        decision 3 in seq\n        /* CIF comment (1547, 963), (256, 35) */\n        comment 'test==3 so it should also return true';\n            /* CIF ANSWER (1341, 1036), (100, 35) */\n            (TRUE):\n                /* CIF PROCEDURECALL (1309, 1086), (164, 50) */\n                call writeln('ALL OK (2)');\n            /* CIF ANSWER (1513, 1036), (100, 35) */\n            (FALSE):\n                /* CIF PROCEDURECALL (1481, 1086), (164, 50) */\n                call writeln('NOT OK (2)');\n        enddecision;\n        /* CIF NEXTSTATE (1427, 1151), (100, 50) */\n        NEXTSTATE Wait;\n    /* CIF state (2204, 160), (100, 50) */\n    state Running;\n        /* CIF input (2204, 230), (100, 50) */\n        input go(msg)\n        /* CIF comment (2324, 237), (184, 35) */\n        comment 'Comment on process type';\n            /* CIF PROCEDURECALL (2202, 300), (103, 35) */\n            call writeln(msg);\n            /* CIF decision (2202, 350), (103, 70) */\n            decision msg\n            /* CIF comment (2326, 360), (111, 50) */\n            comment 'Switch-case\non strings';\n                /* CIF ANSWER (2454, 440), (100, 35) */\n                ('egg'):\n                    /* CIF task (2433, 490), (141, 50) */\n                    task msg := msg // '!!'\n                    /* CIF comment (2595, 490), (118, 50) */\n                    comment 'Concatenate\nstrings';\n                    /* CIF output (2429, 555), (150, 50) */\n                    output rezult(default_str)\n                    /* CIF comment (2594, 553), (161, 53) */\n                    comment 'Send a constant\ndefined in the ASN.1\nmodel';\n                    /* CIF NEXTSTATE (2454, 620), (100, 50) */\n                    NEXTSTATE Running\n                    /* CIF comment (2574, 627), (96, 35) */\n                    comment 'Néxtaytè';\n                /* CIF ANSWER (1864, 440), (100, 35) */\n                ('end'):\n                    /* CIF output (1858, 490), (112, 50) */\n                    output rezult\n('Goodbye!');\n                    /* CIF NEXTSTATE (1864, 557), (100, 50) */\n                    NEXTSTATE Wait;\n                /* CIF ANSWER (2042, 440), (100, 35) */\n                ELSE:\n                    /* CIF task (2021, 490), (141, 50) */\n                    task msg := msg // '!'\n                    /* CIF comment (2183, 490), (118, 50) */\n                    comment 'Concatenate\nstrings';\n                    /* CIF PROCEDURECALL (2008, 560), (167, 35) */\n                    call writeln('msg//! = ', msg);\n                    /* CIF task (1994, 610), (195, 50) */\n                    task msg := msg(3,4) // msg(1,2)\n                    /* CIF comment (2210, 610), (209, 53) */\n                    comment 'Concatenate two substrings\n(can be used to remove an\nelement from a list)';\n                    /* CIF PROCEDURECALL (1980, 680), (224, 35) */\n                    call writeln('msg(3,4)//(1,2) = ',msg);\n                    /* CIF task (2010, 730), (163, 50) */\n                    task msg := first_msg(1, 2)\n                    /* CIF comment (2186, 727), (177, 53) */\n                    comment 'Substring\nTODO check range\nagainst current Length';\n                    /* CIF PROCEDURECALL (1992, 800), (200, 35) */\n                    call writeln('first_msg(1,2)=',msg)\n                    /* CIF comment (2212, 800), (100, 35) */\n                    comment 'should be ay';\n                    /* CIF output (2038, 850), (108, 50) */\n                    output rezult(msg);\n                    /* CIF NEXTSTATE (2042, 915), (100, 50) */\n                    NEXTSTATE Running;\n            enddecision;\n    endstate;\n    /* CIF state (1427, 1151), (100, 50) */\n    state Wait;\n        /* CIF input (1427, 1221), (100, 50) */\n        input go(msg)\n        /* CIF comment (1547, 1228), (120, 35) */\n        comment 'Ïñpût unicode';\n            /* CIF decision (1420, 1286), (114, 70) */\n            decision msg = 'hello'\n            /* CIF comment (1554, 1296), (128, 50) */\n            comment 'Boolean test\non string value';\n                /* CIF ANSWER (1638, 1376), (100, 35) */\n                (FALSE):\n                    /* CIF output (1618, 1426), (139, 50) */\n                    output rezult(first_msg)\n                    /* CIF comment (1777, 1433), (85, 35) */\n                    comment 'OûtpUT';\n                    /* CIF NEXTSTATE (1638, 1491), (100, 50) */\n                    NEXTSTATE Wait;\n                /* CIF ANSWER (1367, 1376), (100, 35) */\n                (TRUE):\n                    /* CIF output (1344, 1426), (145, 50) */\n                    output rezult('Welcome')\n                    /* CIF comment (1509, 1426), (95, 50) */\n                    comment 'Send raw\nstring';\n                    /* CIF decision (1368, 1491), (98, 50) */\n                    decision 3 in {1,2,3};\n                        /* CIF ANSWER (1328, 1561), (88, 33) */\n                        (1 in {1,2}):\n                        /* CIF ANSWER (1418, 1561), (88, 33) */\n                        (0 in {1,2}):\n                    enddecision;\n                    /* CIF decision (1368, 1609), (98, 50) */\n                    decision 4 in {1,2,3};\n                        /* CIF ANSWER (1339, 1679), (66, 33) */\n                        (true):\n                        /* CIF ANSWER (1422, 1679), (70, 33) */\n                        (false):\n                    enddecision;\n                    /* CIF NEXTSTATE (1367, 1727), (100, 50) */\n                    NEXTSTATE Running;\n            enddecision;\n    endstate;\n' expecting PROCESS
org.antlr.v4.runtime.misc.ParseCancellationException: line 4:4 mismatched input '-- A Demo to test octet strings\n    -- using various symbols.\n    \n    -- check that types are case insensitive\n    DCL first_msg, msg my_octStr;\n    \n    DCL seq SeqOf;\n    \n    DCL test Some_Thing;\n    dcl foo MyInteger := 3;\n    \n    -- Unicode comments: héhé hôhÖ\n    \n    dcl alwaysTrue Type2 := 3 in {1,2,3};\n    dcl alwaysFalse Type2 := 0 in {1,2,3};\n    \n    dcl seqofbool seqBool := { true, true};\n    /* CIF ENDTEXT */\n    /* CIF START (1427, 35), (100, 50) */\n    START;\n        /* CIF task (1370, 100), (214, 83) */\n        task test := 5,\ntest := power(test, 1),\ntest := abs(-4+1),\ntest := abs(test)\n        /* CIF comment (1603, 123), (183, 35) */\n        comment 'Task with unicode: voilà!';\n        /* CIF task (1375, 198), (204, 50) */\n        task first_msg := 'Say hello first!'\n        /* CIF comment (1599, 198), (148, 50) */\n        comment 'String assignment';\n        /* CIF PROCEDURECALL (1388, 263), (177, 35) */\n        call writeln( first_msg(1,2));\n        /* CIF PROCEDURECALL (1373, 313), (207, 35) */\n        call writeln( not (not not true));\n        /* CIF task (1394, 363), (165, 50) */\n        task seq := default_seqof,\nseq := {1,2,3}\n        /* CIF comment (1579, 363), (204, 50) */\n        comment 'default_seqof is a constant\ndefined in the ASN.1 model';\n        /* CIF task (1345, 428), (263, 50) */\n        task seq := seq // {4, test} // default_seqof\n        /* CIF comment (1629, 428), (156, 50) */\n        comment 'Concatenate\ntwo SEQUENCE OF';\n        /* CIF task (1408, 493), (137, 50) */\n        task 'seq(1) := seq(2)';\n        /* CIF task (1382, 558), (189, 50) */\n        task seq := seq(0,1) // seq(3, 4)\n        /* CIF comment (1590, 558), (166, 50) */\n        comment 'Remove 3rd element';\n        /* CIF task (1407, 623), (140, 53) */\n        task for x in seq:\n    call writeln(x);\nendfor;\n        /* CIF PROCEDURECALL (1395, 691), (164, 35) */\n        call writeln('test=', test);\n        /* CIF decision (1425, 741), (104, 70) */\n        decision test in seq\n        /* CIF comment (1549, 756), (170, 39) */\n        comment 'Test the "in" operator\nUnicode test: Ï';\n            /* CIF ANSWER (1335, 831), (100, 35) */\n            (TRUE):\n                /* CIF PROCEDURECALL (1308, 881), (154, 50) */\n                call writeln('All OK (1)');\n            /* CIF ANSWER (1498, 831), (100, 35) */\n            (FALSE):\n                /* CIF PROCEDURECALL (1466, 881), (164, 50) */\n                call writeln('NOT OK (1)')\n                /* CIF comment (1650, 888), (117, 35) */\n                comment 'Call UnicÔDË';\n        enddecision;\n        /* CIF decision (1427, 946), (100, 70) */\n        decision 3 in seq\n        /* CIF comment (1547, 963), (256, 35) */\n        comment 'test==3 so it should also return true';\n            /* CIF ANSWER (1341, 1036), (100, 35) */\n            (TRUE):\n                /* CIF PROCEDURECALL (1309, 1086), (164, 50) */\n                call writeln('ALL OK (2)');\n            /* CIF ANSWER (1513, 1036), (100, 35) */\n            (FALSE):\n                /* CIF PROCEDURECALL (1481, 1086), (164, 50) */\n                call writeln('NOT OK (2)');\n        enddecision;\n        /* CIF NEXTSTATE (1427, 1151), (100, 50) */\n        NEXTSTATE Wait;\n    /* CIF state (2204, 160), (100, 50) */\n    state Running;\n        /* CIF input (2204, 230), (100, 50) */\n        input go(msg)\n        /* CIF comment (2324, 237), (184, 35) */\n        comment 'Comment on process type';\n            /* CIF PROCEDURECALL (2202, 300), (103, 35) */\n            call writeln(msg);\n            /* CIF decision (2202, 350), (103, 70) */\n            decision msg\n            /* CIF comment (2326, 360), (111, 50) */\n            comment 'Switch-case\non strings';\n                /* CIF ANSWER (2454, 440), (100, 35) */\n                ('egg'):\n                    /* CIF task (2433, 490), (141, 50) */\n                    task msg := msg // '!!'\n                    /* CIF comment (2595, 490), (118, 50) */\n                    comment 'Concatenate\nstrings';\n                    /* CIF output (2429, 555), (150, 50) */\n                    output rezult(default_str)\n                    /* CIF comment (2594, 553), (161, 53) */\n                    comment 'Send a constant\ndefined in the ASN.1\nmodel';\n                    /* CIF NEXTSTATE (2454, 620), (100, 50) */\n                    NEXTSTATE Running\n                    /* CIF comment (2574, 627), (96, 35) */\n                    comment 'Néxtaytè';\n                /* CIF ANSWER (1864, 440), (100, 35) */\n                ('end'):\n                    /* CIF output (1858, 490), (112, 50) */\n                    output rezult\n('Goodbye!');\n                    /* CIF NEXTSTATE (1864, 557), (100, 50) */\n                    NEXTSTATE Wait;\n                /* CIF ANSWER (2042, 440), (100, 35) */\n                ELSE:\n                    /* CIF task (2021, 490), (141, 50) */\n                    task msg := msg // '!'\n                    /* CIF comment (2183, 490), (118, 50) */\n                    comment 'Concatenate\nstrings';\n                    /* CIF PROCEDURECALL (2008, 560), (167, 35) */\n                    call writeln('msg//! = ', msg);\n                    /* CIF task (1994, 610), (195, 50) */\n                    task msg := msg(3,4) // msg(1,2)\n                    /* CIF comment (2210, 610), (209, 53) */\n                    comment 'Concatenate two substrings\n(can be used to remove an\nelement from a list)';\n                    /* CIF PROCEDURECALL (1980, 680), (224, 35) */\n                    call writeln('msg(3,4)//(1,2) = ',msg);\n                    /* CIF task (2010, 730), (163, 50) */\n                    task msg := first_msg(1, 2)\n                    /* CIF comment (2186, 727), (177, 53) */\n                    comment 'Substring\nTODO check range\nagainst current Length';\n                    /* CIF PROCEDURECALL (1992, 800), (200, 35) */\n                    call writeln('first_msg(1,2)=',msg)\n                    /* CIF comment (2212, 800), (100, 35) */\n                    comment 'should be ay';\n                    /* CIF output (2038, 850), (108, 50) */\n                    output rezult(msg);\n                    /* CIF NEXTSTATE (2042, 915), (100, 50) */\n                    NEXTSTATE Running;\n            enddecision;\n    endstate;\n    /* CIF state (1427, 1151), (100, 50) */\n    state Wait;\n        /* CIF input (1427, 1221), (100, 50) */\n        input go(msg)\n        /* CIF comment (1547, 1228), (120, 35) */\n        comment 'Ïñpût unicode';\n            /* CIF decision (1420, 1286), (114, 70) */\n            decision msg = 'hello'\n            /* CIF comment (1554, 1296), (128, 50) */\n            comment 'Boolean test\non string value';\n                /* CIF ANSWER (1638, 1376), (100, 35) */\n                (FALSE):\n                    /* CIF output (1618, 1426), (139, 50) */\n                    output rezult(first_msg)\n                    /* CIF comment (1777, 1433), (85, 35) */\n                    comment 'OûtpUT';\n                    /* CIF NEXTSTATE (1638, 1491), (100, 50) */\n                    NEXTSTATE Wait;\n                /* CIF ANSWER (1367, 1376), (100, 35) */\n                (TRUE):\n                    /* CIF output (1344, 1426), (145, 50) */\n                    output rezult('Welcome')\n                    /* CIF comment (1509, 1426), (95, 50) */\n                    comment 'Send raw\nstring';\n                    /* CIF decision (1368, 1491), (98, 50) */\n                    decision 3 in {1,2,3};\n                        /* CIF ANSWER (1328, 1561), (88, 33) */\n                        (1 in {1,2}):\n                        /* CIF ANSWER (1418, 1561), (88, 33) */\n                        (0 in {1,2}):\n                    enddecision;\n                    /* CIF decision (1368, 1609), (98, 50) */\n                    decision 4 in {1,2,3};\n                        /* CIF ANSWER (1339, 1679), (66, 33) */\n                        (true):\n                        /* CIF ANSWER (1422, 1679), (70, 33) */\n                        (false):\n                    enddecision;\n                    /* CIF NEXTSTATE (1367, 1727), (100, 50) */\n                    NEXTSTATE Running;\n            enddecision;\n    endstate;\n' expecting PROCESS
	at ee.ibk.sdl.parser.ThrowingErrorListener.syntaxError(ThrowingErrorListener.java:18)
	at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)
	at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:299)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:124)
	at ee.ibk.sdl.parser.grammar.SDLParser.process_definition(SDLParser.java:1352)
	at ee.ibk.sdl.parser.grammar.SDLParser.pr_file(SDLParser.java:309)
	at ee.ibk.sdl.parser.SDLParserMain.doParse(SDLParserMain.java:40)
	at ee.ibk.sdl.parser.SDLParserMain.parseFile(SDLParserMain.java:72)
	at ee.ibk.sdl.parser.SDLParserMain.main(SDLParserMain.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58)
