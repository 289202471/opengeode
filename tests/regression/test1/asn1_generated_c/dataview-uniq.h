#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccUint asn1SccMyInteger;

#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* val, int* pErrCode);
#ifndef ERR_asn1SccMyInteger 
#define ERR_asn1SccMyInteger		1001  /*(0 .. 255)*/
#endif

typedef asn1SccMyInteger asn1SccSome_Thing;

#define asn1SccSome_Thing_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccSome_Thing_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccSome_Thing_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccSome_Thing_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccSome_Thing_REQUIRED_BYTES_FOR_XER_ENCODING   45

void asn1SccSome_Thing_Initialize(asn1SccSome_Thing* pVal);
flag asn1SccSome_Thing_IsConstraintValid(const asn1SccSome_Thing* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccMyInteger arr[100];
} asn1SccSeqOf;

#define asn1SccSeqOf_REQUIRED_BYTES_FOR_ENCODING       101 
#define asn1SccSeqOf_REQUIRED_BITS_FOR_ENCODING        807
#define asn1SccSeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING   101 
#define asn1SccSeqOf_REQUIRED_BITS_FOR_ACN_ENCODING    807
#define asn1SccSeqOf_REQUIRED_BYTES_FOR_XER_ENCODING   4315

void asn1SccSeqOf_Initialize(asn1SccSeqOf* pVal);
flag asn1SccSeqOf_IsConstraintValid(const asn1SccSeqOf* val, int* pErrCode);
#ifndef ERR_asn1SccSeqOf 
#define ERR_asn1SccSeqOf		1002  /*(SIZE(0 .. 100))*/
#endif

typedef struct {    int nCount; 
    
    byte arr[20];
} asn1SccMy_OctStr;

#define asn1SccMy_OctStr_REQUIRED_BYTES_FOR_ENCODING       21 
#define asn1SccMy_OctStr_REQUIRED_BITS_FOR_ENCODING        165
#define asn1SccMy_OctStr_REQUIRED_BYTES_FOR_ACN_ENCODING   21 
#define asn1SccMy_OctStr_REQUIRED_BITS_FOR_ACN_ENCODING    165
#define asn1SccMy_OctStr_REQUIRED_BYTES_FOR_XER_ENCODING   63

void asn1SccMy_OctStr_Initialize(asn1SccMy_OctStr* pVal);
flag asn1SccMy_OctStr_IsConstraintValid(const asn1SccMy_OctStr* val, int* pErrCode);
#ifndef ERR_asn1SccMy_OctStr 
#define ERR_asn1SccMy_OctStr		1003  /*(SIZE(0 .. 20))*/
#endif

typedef asn1SccUint asn1SccType1;

#define asn1SccType1_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccType1_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccType1_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccType1_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccType1_REQUIRED_BYTES_FOR_XER_ENCODING   35

void asn1SccType1_Initialize(asn1SccType1* pVal);
flag asn1SccType1_IsConstraintValid(const asn1SccType1* val, int* pErrCode);
#ifndef ERR_asn1SccType1 
#define ERR_asn1SccType1		1004  /*(0 .. 1)*/
#endif

typedef flag asn1SccType2;

#define asn1SccType2_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccType2_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccType2_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccType2_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccType2_REQUIRED_BYTES_FOR_XER_ENCODING   28

void asn1SccType2_Initialize(asn1SccType2* pVal);
flag asn1SccType2_IsConstraintValid(const asn1SccType2* val, int* pErrCode);


typedef struct {
    asn1SccType1 elem_1;
    asn1SccType2 elem_2;
} asn1SccToto;

#define asn1SccToto_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccToto_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccToto_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccToto_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccToto_REQUIRED_BYTES_FOR_XER_ENCODING   80

void asn1SccToto_Initialize(asn1SccToto* pVal);
flag asn1SccToto_IsConstraintValid(const asn1SccToto* val, int* pErrCode);


typedef struct {    int nCount; 
    
    flag arr[5];
} asn1SccSeqBool;

#define asn1SccSeqBool_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccSeqBool_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccSeqBool_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccSeqBool_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccSeqBool_REQUIRED_BYTES_FOR_XER_ENCODING   109

void asn1SccSeqBool_Initialize(asn1SccSeqBool* pVal);
flag asn1SccSeqBool_IsConstraintValid(const asn1SccSeqBool* val, int* pErrCode);
#ifndef ERR_asn1SccSeqBool 
#define ERR_asn1SccSeqBool		1005  /*(SIZE(1 .. 5))*/
#endif

typedef struct {
    enum {
        MyChoice_a_b_NONE,
        c_PRESENT,
        d_PRESENT 
    } kind;
    union {
        flag c;
        flag d;
    } u; 
} asn1SccMyChoice_a_b;

#define asn1SccMyChoice_a_b_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyChoice_a_b_REQUIRED_BITS_FOR_ENCODING        3
#define asn1SccMyChoice_a_b_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyChoice_a_b_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define asn1SccMyChoice_a_b_REQUIRED_BYTES_FOR_XER_ENCODING   49

void asn1SccMyChoice_a_b_Initialize(asn1SccMyChoice_a_b* pVal);
flag asn1SccMyChoice_a_b_IsConstraintValid(const asn1SccMyChoice_a_b* val, int* pErrCode);
#ifndef ERR_asn1SccMyChoice_a_b_unknown_choice_index 
#define ERR_asn1SccMyChoice_a_b_unknown_choice_index		1006  /**/
#endif

typedef struct {
    enum {
        MyChoice_a_NONE,
        b_PRESENT,
        e_PRESENT 
    } kind;
    union {
        asn1SccMyChoice_a_b b;
        flag e;
    } u; 
} asn1SccMyChoice_a;

#define asn1SccMyChoice_a_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyChoice_a_REQUIRED_BITS_FOR_ENCODING        5
#define asn1SccMyChoice_a_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyChoice_a_REQUIRED_BITS_FOR_ACN_ENCODING    5
#define asn1SccMyChoice_a_REQUIRED_BYTES_FOR_XER_ENCODING   52

void asn1SccMyChoice_a_Initialize(asn1SccMyChoice_a* pVal);
flag asn1SccMyChoice_a_IsConstraintValid(const asn1SccMyChoice_a* val, int* pErrCode);
#ifndef ERR_asn1SccMyChoice_a_unknown_choice_index 
#define ERR_asn1SccMyChoice_a_unknown_choice_index		1007  /**/
#endif

typedef struct {
    enum {
        MyChoice_NONE,
        a_PRESENT,
        f_PRESENT 
    } kind;
    union {
        asn1SccMyChoice_a a;
        flag f;
    } u; 
} asn1SccMyChoice;

#define asn1SccMyChoice_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyChoice_REQUIRED_BITS_FOR_ENCODING        7
#define asn1SccMyChoice_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyChoice_REQUIRED_BITS_FOR_ACN_ENCODING    7
#define asn1SccMyChoice_REQUIRED_BYTES_FOR_XER_ENCODING   55

void asn1SccMyChoice_Initialize(asn1SccMyChoice* pVal);
flag asn1SccMyChoice_IsConstraintValid(const asn1SccMyChoice* val, int* pErrCode);
#ifndef ERR_asn1SccMyChoice_unknown_choice_index 
#define ERR_asn1SccMyChoice_unknown_choice_index		1008  /**/
#endif

extern const asn1SccSeqOf default_seqof;
extern const asn1SccMy_OctStr default_str;
extern const asn1SccMy_OctStr test_string; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */











 


#ifdef  __cplusplus
}
#define CHOICE_c_PRESENT	asn1SccMyChoice_a_b::c_PRESENT
#define CHOICE_d_PRESENT	asn1SccMyChoice_a_b::d_PRESENT
#define CHOICE_b_PRESENT	asn1SccMyChoice_a::b_PRESENT
#define CHOICE_e_PRESENT	asn1SccMyChoice_a::e_PRESENT
#define CHOICE_a_PRESENT	asn1SccMyChoice::a_PRESENT
#define CHOICE_f_PRESENT	asn1SccMyChoice::f_PRESENT

#endif

#endif
