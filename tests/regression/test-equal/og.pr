/* CIF PROCESS (149, 150), (150, 75) */
PROCESS og;
    /* CIF TEXT (97, 0), (427, 348) */
    -- A Demo to test the generation of _Equal functions from ASN1SCC

dcl V1 My_OctStr :=  'Hello';
dcl V2 My_OctStr := 'World!';

dcl V3 SeqOf := { 'Hello', 'World!' };
dcl V4 SeqOf := { 'Hello', 'World' };

dcl fail t_bool := false;

-- Test optional field
dcl V5 Toto := { elem_1 'Hello' }; 
dcl V6 Toto := { elem_1 'Hello', elem_2 {'Ola', 'TheWorld'} };

dcl V7 AChoice := a: TRUE;
dcl V8 ACHoice := b: {'Hello', 'World!'};
    /* CIF ENDTEXT */
    /* CIF START (1065, 26), (60, 30) */
    START;
        /* CIF TASK (1007, 72), (177, 35) */
        TASK v8 := b: {'hello', 'world'};
        /* CIF LABEL (1060, 122), (70, 35) */
        one:
        /* CIF DECISION (1046, 172), (98, 50) */
        DECISION V1 = V2;
                /* CIF ANSWER (669, 242), (73, 28) */
                (true):
                    /* CIF TASK (644, 285), (123, 35) */
                    TASK fail := false;
                    /* CIF PROCEDURECALL (653, 335), (106, 38) */
                    CALL writeln('2');
                    /* CIF LABEL (671, 388), (70, 35) */
                    two:
                    /* CIF DECISION (657, 438), (98, 50) */
                    DECISION V3 = V4;
                            /* CIF ANSWER (452, 508), (73, 28) */
                            (true):
                                /* CIF TASK (427, 551), (123, 35) */
                                TASK fail := false;
                                /* CIF PROCEDURECALL (436, 601), (106, 38) */
                                CALL writeln('4');
                                /* CIF LABEL (448, 654), (82, 35) */
                                three:
                                /* CIF DECISION (411, 704), (156, 95) */
                                DECISION V5 /= V6
and V7 /= V8;
                                        /* CIF ANSWER (376, 819), (73, 28) */
                                        (true):
                                            /* CIF PROCEDURECALL (360, 862), (106, 38) */
                                            CALL writeln('5');
                                            /* CIF TASK (323, 915), (179, 48) */
                                            TASK V5 := V6,
V7 := b: {'Hello', 'World'};
                                            /* CIF TASK (323, 978), (180, 35) */
                                            TASK V8 := b: {'Hello', 'world' };
                                            /* CIF JOIN (395, 1028), (35, 35) */
                                            JOIN three;
                                        /* CIF ANSWER (581, 819), (78, 28) */
                                        (false):
                                            /* CIF PROCEDURECALL (567, 862), (106, 38) */
                                            CALL writeln('6');
                                            /* CIF NEXTSTATE (585, 915), (70, 35) */
                                            NEXTSTATE wait;
                                ENDDECISION;
                            /* CIF ANSWER (962, 508), (78, 28) */
                            (false):
                                /* CIF DECISION (962, 551), (78, 50) */
                                DECISION fail;
                                        /* CIF ANSWER (855, 621), (73, 28) */
                                        (true):
                                            /* CIF PROCEDURECALL (742, 664), (299, 38) */
                                            CALL writeln('FAIL: V3 = V4 reports FALSE, but...');
                                            /* CIF PROCEDURECALL (683, 717), (417, 35) */
                                            CALL writeln('Length of V3(1) =', Length(V3(1)), ' and Value = ', V3(1));
                                            /* CIF PROCEDURECALL (683, 767), (417, 35) */
                                            CALL writeln('Length of V4(1) =', Length(V4(1)), ' and Value = ', V4(1));
                                            /* CIF NEXTSTATE (857, 817), (70, 35) */
                                            NEXTSTATE wait;
                                        /* CIF ANSWER (1145, 621), (78, 28) */
                                        (false):
                                            /* CIF PROCEDURECALL (1131, 664), (106, 38) */
                                            CALL writeln('3');
                                            /* CIF TASK (1113, 717), (141, 35) */
                                            TASK V3(1) := V4(1)(0,4);
                                            /* CIF TASK (1133, 767), (101, 35) */
                                            TASK fail := true;
                                            /* CIF JOIN (1166, 817), (35, 35) */
                                            JOIN two;
                                ENDDECISION;
                    ENDDECISION;
                /* CIF ANSWER (1331, 242), (78, 28) */
                (false):
                    /* CIF DECISION (1331, 285), (78, 50) */
                    DECISION fail;
                            /* CIF ANSWER (1289, 355), (73, 28) */
                            (true):
                                /* CIF PROCEDURECALL (1264, 398), (122, 38) */
                                CALL writeln('FAIL');
                                /* CIF NEXTSTATE (1290, 451), (70, 35) */
                                NEXTSTATE wait;
                            /* CIF ANSWER (1449, 355), (78, 28) */
                            (false):
                                /* CIF PROCEDURECALL (1435, 398), (106, 38) */
                                CALL writeln('1');
                                /* CIF TASK (1445, 451), (86, 35) */
                                TASK V2 := V1;
                                /* CIF TASK (1437, 501), (101, 35) */
                                TASK fail := true;
                                /* CIF JOIN (1470, 551), (35, 35) */
                                JOIN one;
                    ENDDECISION;
        ENDDECISION;
    /* CIF STATE (534, 53), (70, 35) */
    STATE wait;
    ENDSTATE;
ENDPROCESS og;