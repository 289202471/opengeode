[INFO] Starting to parse model test-recursion/og.pr
[ERROR] Failed to parse model.
    org.antlr.v4.runtime.misc.ParseCancellationException: line 3:4 no viable alternative at input '/* CIF TEXT (313, 221), (287, 188) */\n    -- Text area for declarations and comments\n\nuse dv comment 'dataview-uniq.asn';\n\nsignal dd(Tree);\nsignal we;\n    /* CIF ENDTEXT */\n    CHANNEL c\n        FROM ENV TO og WITH dd;\n        FROM og TO ENV WITH we;\n    ENDCHANNEL;\n    BLOCK og;\n        SIGNALROUTE r\n            FROM ENV TO og WITH dd;\n            FROM og TO ENV WITH we;\n        CONNECT c AND r;\n        /* CIF PROCESS (308, 80), (138, 75) */\n        PROCESS og;\n            /* CIF TEXT (57, 58), (287, 140) */\n            -- Text area for declarations and comments\n\ndcl my_tree Tree;\n\ndcl res path;\n            /* CIF ENDTEXT */\n            /* CIF PROCEDURE (574, 209), (75, 35) */\n            PROCEDURE findpath;\n                /* CIF TEXT (107, 140), (329, 53) */\n                dcl result, best_path Path := { cost 0, elem {} };\n\ndcl elem Path_elem := {};\n                /* CIF ENDTEXT */\n                /* CIF TEXT (104, 47), (183, 68) */\n                fpar\n    in startnode letter,\n    in endnode letter;\nreturns Path;\n                /* CIF ENDTEXT */\n                /* CIF START (626, 64), (70, 35) */\n                START;\n                    /* CIF TASK (584, 119), (153, 23) */\n                    TASK best_path.cost := 100;\n                    /* CIF DECISION (585, 162), (151, 50) */\n                    DECISION startnode = endnode;\n                        /* CIF ANSWER (431, 232), (70, 23) */\n                        (true):\n                            /* CIF TASK (398, 275), (136, 23) */\n                            TASK best_path.cost :=0;\n                        /* CIF ANSWER (820, 232), (70, 23) */\n                        (false):\n                            /* CIF DECISION (742, 275), (226, 50) */\n                            DECISION length(my_tree(num(startnode)))\n= 0;\n                                /* CIF ANSWER (547, 345), (70, 23) */\n                                (true):\n                                /* CIF ANSWER (918, 345), (70, 23) */\n                                (false):\n                                    /* CIF TASK (708, 388), (490, 128) */\n                                    TASK for each in my_tree(num(startnode)):\n    result := findpath(each.son, endnode)\n    elem := result.elem\n    result.cost := result.cost + each.cost\n    elem := { each.son } // elem\n    result.elem := elem\n    best_path := if result.cost < best_path.cost then result else best_path fi\nendfor;\n                            ENDDECISION;\n                    ENDDECISION;\n                    /* CIF RETURN (643, 546), (35, 35) */\n                    RETURN best_path;\n            ENDPROCEDURE;\n            /* CIF START (237, 232), (70, 35) */\n            START;\n                /* CIF TASK (60, 287), (424, 128) */\n                TASK my_tree(Letter_a) := {{ cost 3, son b}, {cost 4, son c}},\nmy_tree(Letter_b) := {{cost 2, son d}},\nmy_tree(Letter_c) := {{ cost 1, son d}, {cost 1, son e}, {cost 6, son f}},\nmy_tree(Letter_d) := {{cost 1, son h}},\nmy_tree(Letter_e) := {{cost 7, son h}},\nmy_tree(Letter_f) := {{cost 1, son g}},\nmy_tree(Letter_g) := {},\nmy_tree(Letter_h) := {{cost 5, son g}};\n                /* CIF TASK (202, 435), (139, 35) */\n                TASK res := findpath(a, g);\n                /* CIF PROCEDURECALL (172, 485), (200, 35) */\n                CALL writeln('best cost:', res.cost);\n                /* CIF PROCEDURECALL (199, 540), (145, 35) */\n                CALL write('best path: [ ');\n                /* CIF TASK (196, 590), (151, 53) */\n                TASK for each in res.elem:\n    call write(each, ' ');\nendfor;\n                /* CIF PROCEDURECALL (211, 663), (122, 35) */\n                CALL writeln(']');\n                /* CIF NEXTSTATE (237, 713), (70, 35) */\n                NEXTSTATE wait;\n            /* CIF STATE (494, 231), (70, 35) */\n            STATE wait;\n            ENDSTATE;\n        ENDPROCESS og;\n    ENDBLOCK;\n'
org.antlr.v4.runtime.misc.ParseCancellationException: line 3:4 no viable alternative at input '/* CIF TEXT (313, 221), (287, 188) */\n    -- Text area for declarations and comments\n\nuse dv comment 'dataview-uniq.asn';\n\nsignal dd(Tree);\nsignal we;\n    /* CIF ENDTEXT */\n    CHANNEL c\n        FROM ENV TO og WITH dd;\n        FROM og TO ENV WITH we;\n    ENDCHANNEL;\n    BLOCK og;\n        SIGNALROUTE r\n            FROM ENV TO og WITH dd;\n            FROM og TO ENV WITH we;\n        CONNECT c AND r;\n        /* CIF PROCESS (308, 80), (138, 75) */\n        PROCESS og;\n            /* CIF TEXT (57, 58), (287, 140) */\n            -- Text area for declarations and comments\n\ndcl my_tree Tree;\n\ndcl res path;\n            /* CIF ENDTEXT */\n            /* CIF PROCEDURE (574, 209), (75, 35) */\n            PROCEDURE findpath;\n                /* CIF TEXT (107, 140), (329, 53) */\n                dcl result, best_path Path := { cost 0, elem {} };\n\ndcl elem Path_elem := {};\n                /* CIF ENDTEXT */\n                /* CIF TEXT (104, 47), (183, 68) */\n                fpar\n    in startnode letter,\n    in endnode letter;\nreturns Path;\n                /* CIF ENDTEXT */\n                /* CIF START (626, 64), (70, 35) */\n                START;\n                    /* CIF TASK (584, 119), (153, 23) */\n                    TASK best_path.cost := 100;\n                    /* CIF DECISION (585, 162), (151, 50) */\n                    DECISION startnode = endnode;\n                        /* CIF ANSWER (431, 232), (70, 23) */\n                        (true):\n                            /* CIF TASK (398, 275), (136, 23) */\n                            TASK best_path.cost :=0;\n                        /* CIF ANSWER (820, 232), (70, 23) */\n                        (false):\n                            /* CIF DECISION (742, 275), (226, 50) */\n                            DECISION length(my_tree(num(startnode)))\n= 0;\n                                /* CIF ANSWER (547, 345), (70, 23) */\n                                (true):\n                                /* CIF ANSWER (918, 345), (70, 23) */\n                                (false):\n                                    /* CIF TASK (708, 388), (490, 128) */\n                                    TASK for each in my_tree(num(startnode)):\n    result := findpath(each.son, endnode)\n    elem := result.elem\n    result.cost := result.cost + each.cost\n    elem := { each.son } // elem\n    result.elem := elem\n    best_path := if result.cost < best_path.cost then result else best_path fi\nendfor;\n                            ENDDECISION;\n                    ENDDECISION;\n                    /* CIF RETURN (643, 546), (35, 35) */\n                    RETURN best_path;\n            ENDPROCEDURE;\n            /* CIF START (237, 232), (70, 35) */\n            START;\n                /* CIF TASK (60, 287), (424, 128) */\n                TASK my_tree(Letter_a) := {{ cost 3, son b}, {cost 4, son c}},\nmy_tree(Letter_b) := {{cost 2, son d}},\nmy_tree(Letter_c) := {{ cost 1, son d}, {cost 1, son e}, {cost 6, son f}},\nmy_tree(Letter_d) := {{cost 1, son h}},\nmy_tree(Letter_e) := {{cost 7, son h}},\nmy_tree(Letter_f) := {{cost 1, son g}},\nmy_tree(Letter_g) := {},\nmy_tree(Letter_h) := {{cost 5, son g}};\n                /* CIF TASK (202, 435), (139, 35) */\n                TASK res := findpath(a, g);\n                /* CIF PROCEDURECALL (172, 485), (200, 35) */\n                CALL writeln('best cost:', res.cost);\n                /* CIF PROCEDURECALL (199, 540), (145, 35) */\n                CALL write('best path: [ ');\n                /* CIF TASK (196, 590), (151, 53) */\n                TASK for each in res.elem:\n    call write(each, ' ');\nendfor;\n                /* CIF PROCEDURECALL (211, 663), (122, 35) */\n                CALL writeln(']');\n                /* CIF NEXTSTATE (237, 713), (70, 35) */\n                NEXTSTATE wait;\n            /* CIF STATE (494, 231), (70, 35) */\n            STATE wait;\n            ENDSTATE;\n        ENDPROCESS og;\n    ENDBLOCK;\n'
	at ee.ibk.sdl.parser.ThrowingErrorListener.syntaxError(ThrowingErrorListener.java:18)
	at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)
	at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportNoViableAlternative(DefaultErrorStrategy.java:282)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:121)
	at ee.ibk.sdl.parser.grammar.SDLParser.entity_in_system(SDLParser.java:617)
	at ee.ibk.sdl.parser.grammar.SDLParser.system_definition(SDLParser.java:383)
	at ee.ibk.sdl.parser.grammar.SDLParser.pr_file(SDLParser.java:303)
	at ee.ibk.sdl.parser.SDLParserMain.doParse(SDLParserMain.java:40)
	at ee.ibk.sdl.parser.SDLParserMain.parseFile(SDLParserMain.java:72)
	at ee.ibk.sdl.parser.SDLParserMain.main(SDLParserMain.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58)
