/* CIF PROCESS (148, 150), (150, 75) */
PROCESS myfunction;
    /* CIF TEXT (0, 17), (296, 383) */
    -- Timers defined in the interface view
-- Use SET_TIMER (value, timer name)
-- and RESET_TIMER (timer name) in a
-- PROCEDURE CALL symbol to use them



DCL toto T_Int32;

TIMER myTimer;

-- Test default value for a complex type
DCL def_val MySeq := { a 3, b taste };

-- To test power, fix, float
dcl someReal MyReal := 1.5;
dcl largeReal LargerReal := 0.0;
dcl someInt t_uInt8 := 2;
dcl otherint T_uint8 := 1;

-- To test 'op_not'
dcl opnot T_boolean := not true;
dcl str MyOctStr := 'abc';

dcl bar SeqInt := { 1,1 };
    /* CIF ENDTEXT */
    /* CIF PROCEDURE (982, 490), (91, 35) */
    PROCEDURE factorial;
        /* CIF TEXT (29, 42), (215, 53) */
        fpar in N MyInteger, 
          in/out result MyInteger;
        /* CIF ENDTEXT */
        /* CIF START (298, 33), (70, 35) */
        START;
            /* CIF TASK (284, 83), (97, 35) */
            TASK result := 1;
            /* CIF TASK (223, 133), (220, 53) */
            TASK for x in range(1, n+1):
    result := (result * x) mod 255
endfor;
            /* CIF RETURN (315, 201), (35, 35) */
            RETURN ;
    ENDPROCEDURE;
    /* CIF START (591, 0), (100, 50) */
    START;
        /* CIF PROCEDURECALL (586, 65), (110, 35) */
        CALL writeln(str);
        /* CIF PROCEDURECALL (552, 115), (177, 35) */
        CALL writeln(1 + (-otherint));
        /* CIF PROCEDURECALL (430, 165), (421, 35) */
        CALL writeln(-someint, if someint>0 then ' is ' else 'Foo' fi, not true);
        /* CIF PROCEDURECALL (514, 215), (254, 35) */
        CALL write(if someint>0 then 2 else 1 fi);
        /* CIF PROCEDURECALL (496, 265), (289, 35) */
        CALL write(if someint>0 then someint else 1 fi);
        /* CIF PROCEDURECALL (577, 315), (128, 35) */
        CALL writeln(bar(1));
        /* CIF PROCEDURECALL (532, 365), (217, 35) */
        CALL writeln(opnot, ' ', not opnot);
        /* CIF TASK (480, 415), (321, 35) */
        TASK someInt := if someint = 0 then someint else 0 fi;
        /* CIF DECISION (504, 465), (273, 87) */
        DECISION someint /=0 and then (10 / someInt > 0)
or else someint = 0
        /* CIF COMMENT (793, 474), (179, 68) */
        COMMENT 'Using "and else" is the
short-circuit form. The
second part should not
be evaluated.';
                /* CIF ANSWER (561, 572), (70, 23) */
                (true):
                    /* CIF TASK (541, 610), (110, 35) */
                    TASK someInt := 2;
                    /* CIF PROCEDURECALL (537, 660), (117, 38) */
                    CALL writeln('OK');
                /* CIF ANSWER (664, 572), (70, 23) */
                (false):
        ENDDECISION;
        /* CIF NEXTSTATE (608, 713), (65, 33) */
        NEXTSTATE Wait;
    /* CIF STATE (608, 713), (65, 33) */
    STATE Wait;
        /* CIF INPUT (865, 766), (89, 33) */
        INPUT mytimer;
            /* CIF PROCEDURECALL (818, 814), (182, 33) */
            CALL writeln('timer expired');
            /* CIF PROCEDURECALL (829, 862), (160, 33) */
            CALL factorial(3, someint);
            /* CIF NEXTSTATE (877, 910), (65, 33) */
            NEXTSTATE Wait;
        /* CIF INPUT (421, 766), (181, 33) */
        INPUT start_something (toto);
            /* CIF OUTPUT (376, 814), (270, 33) */
            OUTPUT result_data((toto+1) mod 2147483647);
            /* CIF PROCEDURECALL (436, 862), (150, 48) */
            CALL writeln
('Hello Toto', toto);
            /* CIF PROCEDURECALL (413, 925), (196, 33) */
            CALL set_timer(1000, myTimer);
            /* CIF TASK (346, 973), (330, 35) */
            TASK largeReal := power(someReal, 2);
            /* CIF PROCEDURECALL (282, 1023), (458, 35) */
            CALL writeln(someReal, ' ** 2' , ' == ', largeReal, ' (should be 2.25 )');
            /* CIF TASK (411, 1073), (201, 35) */
            TASK someReal := float(someInt);
            /* CIF TASK (391, 1123), (241, 35) */
            TASK someInt := fix(someReal) mod 255;
            /* CIF TASK (435, 1173), (152, 35) */
            TASK opnot := not opnot;
            /* CIF TASK (430, 1223), (163, 35) */
            TASK 'someint := -someint'
            /* CIF COMMENT (613, 1223), (196, 35) */
            COMMENT 'XXX should raise an error!';
            /* CIF TASK (429, 1273), (164, 35) */
            TASK someint := (-8) mod 5;
            /* CIF NEXTSTATE (480, 1323), (63, 33) */
            NEXTSTATE wait;
    ENDSTATE;
ENDPROCESS myfunction;