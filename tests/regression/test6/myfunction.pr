/* CIF PROCESS (148, 150), (150, 75) */
PROCESS myfunction;
/* CIF TEXT (-533, -82), (271, 323) */
-- Timers defined in the interface view
-- Use SET_TIMER (value, timer name)
-- and RESET_TIMER (timer name) in a
-- PROCEDURE CALL symbol to use them



DCL toto T_Int32;

TIMER myTimer;

-- Test default value for a complex type
DCL def_val MySeq := { a 3, b taste };

-- To test power, fix, float
dcl someReal MyReal := 1.5;
dcl someInt t_uInt8 := 2;

-- To test 'op_not'
dcl opnot T_boolean := not true;
/* CIF ENDTEXT */
/* CIF PROCEDURE (358, 391), (91, 35) */
PROCEDURE factorial;
/* CIF TEXT (29, 42), (215, 48) */
fpar in N MyInteger, 
          in/out result MyInteger;
/* CIF ENDTEXT */
/* CIF START (298, 33), (70, 35) */
START;
/* CIF TASK (284, 83), (97, 35) */
TASK result := 1;
/* CIF TASK (223, 133), (220, 53) */
TASK for x in range(1, n+1):
    result := (result * x) mod 255
endfor;
/* CIF RETURN (315, 201), (35, 35) */
RETURN ;
ENDPROCEDURE;
/* CIF START (58, -99), (100, 50) */
START;
/* CIF NEXTSTATE (58, -34), (100, 50) */
NEXTSTATE Wait;


/* CIF STATE (58, -34), (100, 50) */
STATE Wait;
/* CIF INPUT (277, 36), (100, 50) */
INPUT mytimer;
/* CIF PROCEDURECALL (259, 101), (135, 50) */
CALL writeln
('timer expired');
/* CIF PROCEDURECALL (247, 166), (160, 35) */
CALL factorial(3, someint);
/* CIF NEXTSTATE (277, 216), (100, 50) */
NEXTSTATE Wait;
/* CIF INPUT (-83, 36), (198, 50) */
INPUT start_something (toto);
/* CIF OUTPUT (-119, 101), (270, 50) */
OUTPUT result_data((toto+1) mod 2147483647);
/* CIF PROCEDURECALL (-59, 166), (150, 50) */
CALL writeln
('Hello Toto', toto);
/* CIF PROCEDURECALL (-50, 231), (132, 50) */
CALL set_timer
(1000, myTimer);
/* CIF TASK (-142, 296), (316, 35) */
TASK someReal := power(someReal, someInt mod 1);
/* CIF PROCEDURECALL (-154, 346), (340, 35) */
CALL writeln('1.5 ** 2 == ', someReal, ' (should be 2.25 )');
/* CIF TASK (-84, 396), (201, 35) */
TASK someReal := float(someInt);
/* CIF TASK (-104, 446), (241, 35) */
TASK someInt := fix(someReal) mod 255;
/* CIF TASK (-60, 496), (152, 35) */
TASK opnot := not opnot;
/* CIF TASK (-62, 546), (157, 35) */
TASK someint := -someint;
/* CIF TASK (-66, 596), (164, 35) */
TASK someint := (-8) mod 5;
/* CIF NEXTSTATE (-35, 646), (102, 50) */
NEXTSTATE wait;
ENDSTATE;
ENDPROCESS myfunction;