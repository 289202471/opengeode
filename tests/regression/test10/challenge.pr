PROCESS challenge;
STATE ON;
SUBSTRUCTURE
in (via_toto);
out (ret0);
/* CIF TEXT (-642, 222), (334, 95) */
dcl myresult T_UInt8 := 4;
-- Use a variable with the same name as a variable
-- in the outer scope, to check that code generators
-- use the proper one
dcl result T_UInt32 := 9;
/* CIF ENDTEXT */
/* CIF PROCEDURE (-326, 114), (70, 35) */
PROCEDURE exit
/* CIF COMMENT (-236, 90), (157, 93) */
COMMENT 'Special exit
procedure - called
automatically when
leaving the nested
state';
/* CIF START (163, 119), (70, 35) */
START;
/* CIF PROCEDURECALL (68, 169), (259, 35) */
CALL writeln('LEAVING the nested state');
/* CIF RETURN (180, 219), (35, 35) */
RETURN ;
ENDPROCEDURE;
/* CIF PROCEDURE (-645, 493), (102, 35) */
PROCEDURE inner_proc;
/* CIF TEXT (31, 41), (364, 93) */
fpar in toto T_UInt8;

-- Redefine a variable declared in outer scope
dcl result t_Boolean := true;
/* CIF ENDTEXT */
/* CIF START (479, 97), (70, 35) */
START;
/* CIF LABEL (471, 147), (86, 35) */
hey_joe:
/* CIF PROCEDURECALL (369, 197), (289, 35) */
CALL writeln('Procedure call with toto=', toto);
/* CIF TASK (453, 247), (121, 35) */
TASK result := false;
/* CIF LABEL (473, 297), (82, 35) */
leaving:
/* CIF RETURN (496, 347), (35, 35) */
RETURN ;
ENDPROCEDURE;
/* CIF PROCEDURE (-330, 25), (73, 35) */
PROCEDURE entry
/* CIF COMMENT (-241, 2), (190, 83) */
COMMENT 'Special Entry
procedure - called
automatically upon
entrance to the nested
state';
/* CIF START (191, 78), (70, 35) */
START;
/* CIF PROCEDURECALL (100, 128), (251, 35) */
CALL writeln('ENTERING NESTED STATE');
/* CIF RETURN (208, 178), (35, 35) */
RETURN ;
ENDPROCEDURE;
/* CIF START (304, -22), (89, 35) */
START via_toto ;
/* CIF PROCEDURECALL (213, 28), (271, 35) */
CALL writeln('start via toto, returning ret0');
/* CIF RETURN (331, 78), (35, 35) */
RETURN ret0;
/* CIF START (54, -21), (70, 35) */
START;
/* CIF PROCEDURECALL (-10, 29), (199, 35) */
CALL writeln('start without via');
/* CIF LABEL (33, 79), (111, 35) */
inside_label:
/* CIF PROCEDURECALL (20, 129), (137, 35) */
CALL pow(3,3, result);
/* CIF DECISION (52, 179), (74, 50) */
DECISION result;
/* CIF ANSWER (-23, 249), (92, 23) */
(myresult):
/* CIF ANSWER (101, 249), (70, 23) */
ELSE:
/* CIF TASK (78, 287), (115, 35) */
TASK myresult := 5;
ENDDECISION;
/* CIF PROCEDURECALL (-47, 337), (272, 35) */
CALL writeln('going to internal hello state');
/* CIF LABEL (45, 387), (88, 35) */
nslabel:
/* CIF NEXTSTATE (54, 437), (70, 35) */
NEXTSTATE hello;
/* CIF LABEL (-752, 295), (90, 35) */
CONNECTION to_label:
/* CIF JOIN (-725, 345), (35, 35) */
JOIN another_floating;
/* CIF End Label */
ENDCONNECTION;
/* CIF LABEL (-372, 443), (141, 35) */
CONNECTION another_floating:
/* CIF TASK (-359, 493), (115, 35) */
TASK myresult := 1;
/* CIF PROCEDURECALL (-383, 543), (164, 35) */
CALL inner_proc(myresult);
/* CIF RETURN (-319, 593), (35, 35) */
RETURN ;
/* CIF End Label */
ENDCONNECTION;
/* CIF STATE (-884, -29), (70, 35) */
STATE hello;
/* CIF INPUT (-884, 32), (70, 35) */
INPUT run;
/* CIF PROCEDURECALL (-1047, 82), (395, 35) */
CALL writeln('Bye substate, leaving with no return value', result);
/* CIF TASK (-912, 132), (125, 53) */
TASK myresult := 88,
result := 33;
/* CIF JOIN (-867, 200), (35, 35) */
JOIN to_label;
ENDSTATE;

ENDSUBSTRUCTURE;
/* CIF TEXT (-486, -40), (298, 56) */
-- This system tests nested states

dcl result T_uint32 :=0;
/* CIF ENDTEXT */
/* CIF PROCEDURE (-992, 214), (66, 35) */
PROCEDURE toto;
/* CIF TEXT (371, 134), (298, 140) */
-- Declare your variables

-- Syntax: DCL <variable name> <type name>;

dcl i T_Int8  := 1;
/* CIF ENDTEXT */
/* CIF START (178, 86), (70, 35) */
START;
/* CIF DECISION (178, 136), (70, 50) */
DECISION i;
/* CIF ANSWER (131, 206), (73, 23) */
(1):
/* CIF TASK (127, 244), (80, 35) */
TASK i := i + 1;
/* CIF RETURN (150, 294), (35, 35) */
RETURN ;
/* CIF ANSWER (223, 206), (70, 23) */
ELSE:
/* CIF RETURN (240, 244), (35, 35) */
RETURN ;
ENDDECISION;
ENDPROCEDURE;
/* CIF START (-857, 59), (68, 37) */
START;
/* CIF PROCEDURECALL (-935, 111), (225, 35) */
CALL writeln('[STARTUP] Going OFF');
/* CIF NEXTSTATE (-858, 161), (70, 35) */
NEXTSTATE OFF;


/* CIF STATE (-443, 238), (73, 35) */
STATE Safe;
/* CIF INPUT (-487, 293), (70, 35) */
INPUT *;
/* CIF PROCEDURECALL (-517, 343), (130, 35) */
CALL pow(2,2, result);
/* CIF PROCEDURECALL (-583, 393), (262, 35) */
CALL writeln('Result of pow(2,2) = ', result);
/* CIF NEXTSTATE (-487, 443), (70, 35) */
NEXTSTATE -;
/* CIF INPUT (-313, 293), (88, 35) */
INPUT any_one;
/* CIF NEXTSTATE (-304, 343), (70, 35) */
NEXTSTATE on;
ENDSTATE;




/* CIF STATE (-141, 32), (65, 35) */
STATE ON;
/* CIF INPUT (51, 87), (88, 35) */
INPUT any_one;
/* CIF NEXTSTATE (38, 137), (113, 35) */
NEXTSTATE -;
/* CIF INPUT (161, 87), (78, 35) */
INPUT go_off;
/* CIF NEXTSTATE (169, 137), (62, 35) */
NEXTSTATE OFF;
/* CIF CONNECT (-108, 87), (0, 35) */
CONNECT ret0;
/* CIF PROCEDURECALL (-244, 137), (272, 35) */
CALL writeln('Received ret0, going to Safe');
/* CIF NEXTSTATE (-141, 187), (67, 35) */
NEXTSTATE Safe;
/* CIF CONNECT (-424, 87), (0, 35) */
CONNECT ;
/* CIF PROCEDURECALL (-594, 137), (340, 35) */
CALL writeln('Exit from nested state (no return value)');
/* CIF NEXTSTATE (-459, 187), (70, 35) */
NEXTSTATE off;
ENDSTATE;

/* CIF STATE (-858, 161), (70, 35) */
STATE OFF;
/* CIF INPUT (-858, 216), (70, 35) */
INPUT run;
/* CIF PROCEDURECALL (-931, 266), (217, 35) */
CALL writeln('Going ON VIA TOTO');
/* CIF NEXTSTATE (-890, 317), (132, 35) */
NEXTSTATE ON via via_toto
/* CIF COMMENT (-738, 317), (219, 35) */
COMMENT 'Enter substate via entry point';
ENDSTATE;
ENDPROCESS challenge;