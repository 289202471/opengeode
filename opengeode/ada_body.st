group adb;

/* top-level: template for the code of a process
 * name: process name
 * decl: list of local declarations
 * constants: list of start named start transitions (when using substates)
 * states: list of states
 * asn1_mod : list of ASN.1 modules
 * simu, dll : flags set by the user for generation of optional code
*/
process(name, decl, constants, states, asn1_mod, simu, dll) ::= <<
--  This file was generated automatically: DO NOT MODIFY !

<if(asn1_mod)>
--  ASN.1 Modules used by this process, and generated by ASN1SCC
<asn1_mod: {each |
with <each>;
use <each>;}; separator="\n">

-- ASN.1 Runtime, containing basic types
with AdaASN1rtl;
use AdaASN1rtl;
<endif>


--  Include Ada generic libraries used by the generated code
with System.IO;
use System.IO;

with Ada.Unchecked_Conversion;
with Ada.Numeric.Generic_Elementary_Functions;

with Interfaces;
use Interfaces;

<if(simu)>
--  Access to C compatible types when interacting with another language
with Interfaces.C.Strings;
use Interfaces.C.Strings;
<endif>

package body <name> is
    --  Local variables declared in textboxes
    <decl; separator="\n">
    --  List of SDL states, and variable holding the current state
    type States is (<states; separator=", ">);
    state: States;
    <if(constants)>
    --  Constants holding substate identifier for the start transition
    <constants; separator="\n">
    <endif>
    --  Declaration of the procedure executing transitions
    procedure RunTransition(Id: Integer);

    --  Process initialization: execute the START transition)
    begin
        RunTransition(0);
end <name>;
>>

/* Variable declaration (DCL var sort [:= def_expr]; */
dcl(var, sort, def_expr) ::= <<
l_<var> : aliased <sort><if(def_expr)> := <def_expr><endif>;
>>

/* Constant declaration */
constant(var, val) ::= "<var> : constant := <val>;"
